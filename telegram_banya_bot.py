import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –û—Ç—Ä–∏–º—É—î–º–æ API-—Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç (–∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ Google Sheets/–ë–î)
users = {}
expenses = []

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"))
main_menu.add(KeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"))
main_menu.add(KeyboardButton("üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏"))
main_menu.add(KeyboardButton("üìä –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –±–∞–Ω—é. –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def add_user(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = message.from_user.full_name
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} –¥–æ–¥–∞–Ω–∏–π!")

@dp.message_handler(lambda message: message.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def remove_user(message: types.Message):
    user_id = message.from_user.id
    if user_id in users:
        del users[user_id]
        await message.answer("‚ùå –í–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑—ñ —Å–ø–∏—Å–∫—É!")
    else:
        await message.answer("‚ö†Ô∏è –í–∞—Å –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É!")

@dp.message_handler(lambda message: message.text == "üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")
async def add_expense(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç —ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (—ó–∂–∞/–∞–ª–∫–æ–≥–æ–ª—å/–±–∞–Ω—è) —É —Ñ–æ—Ä–º–∞—Ç—ñ: 500 —ó–∂–∞")

@dp.message_handler(lambda message: " " in message.text)
async def save_expense(message: types.Message):
    try:
        amount, category = message.text.split()
        amount = float(amount)
        expenses.append({"user": message.from_user.full_name, "amount": amount, "category": category})
        await message.answer(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ {amount} –≥—Ä–Ω –Ω–∞ {category} –¥–æ–¥–∞–Ω–∞!")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 500 —ó–∂–∞")

@dp.message_handler(lambda message: message.text == "üìä –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")
async def calculate_expenses(message: types.Message):
    total = sum(exp["amount"] for exp in expenses)
    food = sum(exp["amount"] for exp in expenses if exp["category"] == "—ó–∂–∞")
    alcohol = sum(exp["amount"] for exp in expenses if exp["category"] == "–∞–ª–∫–æ–≥–æ–ª—å")
    bath = sum(exp["amount"] for exp in expenses if exp["category"] == "–±–∞–Ω—è")
    
    result = (f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total} –≥—Ä–Ω\n"
              f"üçó –á–∂–∞: {food} –≥—Ä–Ω\n"
              f"üçæ –ê–ª–∫–æ–≥–æ–ª—å: {alcohol} –≥—Ä–Ω\n"
              f"üî• –ë–∞–Ω—è: {bath} –≥—Ä–Ω")
    await message.answer(result)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
