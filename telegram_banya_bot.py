import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –û—Ç—Ä–∏–º—É—î–º–æ API-—Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå TELEGRAM_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π! –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö –≤–∏—Ç—Ä–∞—Ç–∏
users = {}
bath_visitors = []
alcohol_drinkers = []
expenses = {}
bath_cost = 0  # –í–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ

class BathSession(StatesGroup):
    adding_user = State()
    selecting_visitors = State()
    selecting_alcohol_drinkers = State()
    selecting_expense_user = State()
    selecting_expense_type = State()
    entering_expense_amount = State()
    entering_bath_cost = State()
    confirming_expenses = State()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")],
        [KeyboardButton(text="üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")],
        [KeyboardButton(text="üî• –í–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ")],
        [KeyboardButton(text="üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –±–∞–Ω—é. –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.message(F.text == "üî• –í–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ")
async def set_bath_cost(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    await state.set_state(BathSession.entering_bath_cost)

@dp.message(F.text.regexp(r'\d+'), BathSession.entering_bath_cost)
async def save_bath_cost(message: types.Message, state: FSMContext):
    global bath_cost
    bath_cost = int(message.text)
    await message.answer(f"‚úÖ –í–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {bath_cost} –≥—Ä–Ω", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")
async def start_calculation(message: types.Message, state: FSMContext):
    if not users:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"visitor_{name}")] for name in users] +
                        [[InlineKeyboardButton(text="‚úÖ –î–∞–ª—ñ", callback_data="next")]]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_visitors)

@dp.callback_query(F.data == "next", BathSession.selecting_visitors)
async def select_alcohol_drinkers(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"drinker_{name}")] for name in bath_visitors] +
                        [[InlineKeyboardButton(text="‚úÖ –î–∞–ª—ñ", callback_data="finalize")]]
    )
    await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –ø–∏–≤ –∞–ª–∫–æ–≥–æ–ª—å:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_alcohol_drinkers)

@dp.callback_query(F.data == "finalize", BathSession.selecting_alcohol_drinkers)
async def finalize_calculation(callback: types.CallbackQuery, state: FSMContext):
    global bath_cost
    total_food = sum(expenses[user]['food'] for user in bath_visitors)
    total_alcohol = sum(expenses[user]['alcohol'] for user in alcohol_drinkers)
    per_person_bath = bath_cost / len(bath_visitors) if bath_visitors else 0
    per_person_alcohol = total_alcohol / len(alcohol_drinkers) if alcohol_drinkers else 0
    per_person_food = total_food / len(bath_visitors) if bath_visitors else 0
    total_spent = total_food + total_alcohol + bath_cost
    
    result = "üí∞ **–ü—ñ–¥—Å—É–º–æ–∫ –≤–∏—Ç—Ä–∞—Ç:**\n"
    result += f"üîπ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_spent} –≥—Ä–Ω\n"
    result += f"üçó –á–∂–∞: {total_food} –≥—Ä–Ω\n"
    result += f"üçæ –ê–ª–∫–æ–≥–æ–ª—å: {total_alcohol} –≥—Ä–Ω\n"
    result += f"üî• –ë–∞–Ω—è: {bath_cost} –≥—Ä–Ω\n\n"
    
    for user in bath_visitors:
        paid = sum(expenses[user].values())
        owes = per_person_bath + per_person_food - paid
        if user in alcohol_drinkers:
            owes += per_person_alcohol
        result += f"üë§ {user} –≤–∏—Ç—Ä–∞—Ç–∏–≤ {paid} –≥—Ä–Ω, –º–∞—î —Å–ø–ª–∞—Ç–∏—Ç–∏: {owes:+.2f} –≥—Ä–Ω\n"
    
    await callback.message.answer(result, reply_markup=main_menu)
    await state.clear()

async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("‚ùå –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
