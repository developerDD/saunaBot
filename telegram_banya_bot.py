import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –û—Ç—Ä–∏–º—É—î–º–æ API-—Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå TELEGRAM_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π! –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤—ñ–¥–≤—ñ–¥—É—é—Ç—å –±–∞–Ω—é
users = {}
bath_visitors = []
expenses = {}

class BathSession(StatesGroup):
    selecting_visitors = State()
    entering_food_expense = State()
    entering_alcohol_expense = State()
    entering_bath_cost = State()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")],
        [KeyboardButton(text="üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –±–∞–Ω—é. –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.message(lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def add_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await state.set_state("adding_user")

@dp.message(F.text, state="adding_user")
async def save_user(message: types.Message, state: FSMContext):
    users[message.text] = 0
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.text} –¥–æ–¥–∞–Ω–∏–π!", reply_markup=main_menu)
    await state.clear()

@dp.message(lambda message: message.text == "üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")
async def start_calculation(message: types.Message, state: FSMContext):
    if not users:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"visitor_{name}")] for name in users]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_visitors)

@dp.callback_query(F.data.startswith("visitor_"), state=BathSession.selecting_visitors)
async def select_visitor(callback: types.CallbackQuery, state: FSMContext):
    visitor_name = callback.data.replace("visitor_", "")
    if visitor_name in bath_visitors:
        bath_visitors.remove(visitor_name)
    else:
        bath_visitors.append(visitor_name)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name + (" ‚úÖ" if name in bath_visitors else ""), callback_data=f"visitor_{name}")] for name in users]
    )
    await callback.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ:", reply_markup=keyboard)

@dp.message(F.text == "–î–∞–ª—ñ", state=BathSession.selecting_visitors)
async def ask_food_expense(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —ó–∂—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    await state.set_state(BathSession.entering_food_expense)

@dp.message(F.text.regexp(r'\d+'), state=BathSession.entering_food_expense)
async def save_food_expense(message: types.Message, state: FSMContext):
    expenses["food"] = int(message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    await state.set_state(BathSession.entering_alcohol_expense)

@dp.message(F.text.regexp(r'\d+'), state=BathSession.entering_alcohol_expense)
async def save_alcohol_expense(message: types.Message, state: FSMContext):
    expenses["alcohol"] = int(message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    await state.set_state(BathSession.entering_bath_cost)

@dp.message(F.text.regexp(r'\d+'), state=BathSession.entering_bath_cost)
async def finalize_calculation(message: types.Message, state: FSMContext):
    expenses["bath"] = int(message.text)
    total_cost = sum(expenses.values())
    per_person = total_cost / len(bath_visitors)
    
    result = (f"üí∞ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_cost} –≥—Ä–Ω\n"
              f"üçó –á–∂–∞: {expenses['food']} –≥—Ä–Ω\n"
              f"üçæ –ê–ª–∫–æ–≥–æ–ª—å: {expenses['alcohol']} –≥—Ä–Ω\n"
              f"üî• –ë–∞–Ω—è: {expenses['bath']} –≥—Ä–Ω\n"
              f"üí≥ –ö–æ–∂–µ–Ω –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á –º–∞—î –∑–∞–ø–ª–∞—Ç–∏—Ç–∏: {per_person:.2f} –≥—Ä–Ω")
    
    await message.answer(result, reply_markup=main_menu)
    await state.clear()

async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("‚ùå –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
