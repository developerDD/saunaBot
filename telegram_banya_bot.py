import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –û—Ç—Ä–∏–º—É—î–º–æ API-—Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå TELEGRAM_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π! –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö –≤–∏—Ç—Ä–∞—Ç–∏
users = {}
bath_visitors = []
expenses = {}

class BathSession(StatesGroup):
    adding_user = State()
    selecting_visitors = State()
    selecting_expense_user = State()
    selecting_expense_type = State()
    entering_expense_amount = State()
    confirming_expenses = State()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")],
        [KeyboardButton(text="üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")],
        [KeyboardButton(text="üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –±–∞–Ω—é. –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def add_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await state.set_state(BathSession.adding_user)

@dp.message(F.text, BathSession.adding_user)
async def save_user(message: types.Message, state: FSMContext):
    user_name = message.text.strip()
    if user_name in users:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î!")
    else:
        users[user_name] = 0
        expenses[user_name] = {"food": 0, "alcohol": 0, "bath": 0}
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} –¥–æ–¥–∞–Ω–∏–π!", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")
async def add_expense_menu(message: types.Message, state: FSMContext):
    if not users:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"expense_{name}")] for name in users]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –∑—Ä–æ–±–∏–≤ –≤–∏—Ç—Ä–∞—Ç–∏:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_expense_user)

@dp.callback_query(F.data.startswith("expense_"), BathSession.selecting_expense_user)
async def select_expense_user(callback: types.CallbackQuery, state: FSMContext):
    selected_user = callback.data.replace("expense_", "")
    await state.update_data(expense_user=selected_user)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üçó –á–∂–∞")],
            [KeyboardButton(text="üçæ –ê–ª–∫–æ–≥–æ–ª—å")],
            [KeyboardButton(text="üî• –ë–∞–Ω—è")]
        ],
        resize_keyboard=True
    )
    await callback.message.answer(f"–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç –¥–ª—è {selected_user}:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_expense_type)

@dp.message(F.text.in_(["üçó –á–∂–∞", "üçæ –ê–ª–∫–æ–≥–æ–ª—å", "üî• –ë–∞–Ω—è"]), BathSession.selecting_expense_type)
async def ask_expense_amount(message: types.Message, state: FSMContext):
    category_map = {"üçó –á–∂–∞": "food", "üçæ –ê–ª–∫–æ–≥–æ–ª—å": "alcohol", "üî• –ë–∞–Ω—è": "bath"}
    category = category_map[message.text]
    await state.update_data(expense_category=category)
    await message.answer(f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ {message.text} (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    await state.set_state(BathSession.entering_expense_amount)

@dp.message(F.text.regexp(r'\d+'), BathSession.entering_expense_amount)
async def save_expense(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = data["expense_user"]
    category = data["expense_category"]
    expenses[user][category] += int(message.text)
    await message.answer(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ {category} –¥–ª—è {user} –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")
async def start_calculation(message: types.Message, state: FSMContext):
    if not users:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"visitor_{name}")] for name in users] +
                        [[InlineKeyboardButton(text="‚úÖ –î–∞–ª—ñ", callback_data="next")]]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_visitors)

@dp.callback_query(F.data == "next", BathSession.selecting_visitors)
async def finalize_calculation(callback: types.CallbackQuery, state: FSMContext):
    total_costs = {user: sum(expenses[user].values()) for user in bath_visitors}
    per_person = {user: total_costs[user] / len(bath_visitors) for user in bath_visitors}
    
    result = "üí∞ **–ü—ñ–¥—Å—É–º–æ–∫ –≤–∏—Ç—Ä–∞—Ç:**\n"
    for user, total in total_costs.items():
        result += f"üë§ {user}: {total} –≥—Ä–Ω (–º–∞—î –∑–∞–ø–ª–∞—Ç–∏—Ç–∏ {per_person[user]:.2f} –≥—Ä–Ω)\n"
    
    await callback.message.answer(result, reply_markup=main_menu)
    await state.clear()

async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("‚ùå –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
