import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –û—Ç—Ä–∏–º—É—î–º–æ API-—Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå TELEGRAM_API_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π! –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö –≤–∏—Ç—Ä–∞—Ç–∏
users = {}
bath_visitors = []
alcohol_drinkers = []
expenses = {}
bath_cost = 0  # –í–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ

class BathSession(StatesGroup):
    adding_user = State()
    selecting_visitors = State()
    selecting_alcohol_drinkers = State()
    selecting_expense_user = State()
    selecting_expense_type = State()
    entering_expense_amount = State()
    entering_bath_cost = State()
    confirming_expenses = State()


# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")],
        [KeyboardButton(text="üßñ‚Äç‚ôÇÔ∏è –í–∏–±—Ä–∞—Ç–∏ —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ")],
        [KeyboardButton(text="üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")],
        [KeyboardButton(text="üî• –í–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ")],
        [KeyboardButton(text="üçæ –í–∫–∞–∑–∞—Ç–∏ —Ö—Ç–æ –ø–∏–≤ –∞–ª–∫–æ–≥–æ–ª—å")],
        [KeyboardButton(text="üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –±–∞–Ω—é. –í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def add_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    await state.set_state(BathSession.adding_user)

@dp.message(BathSession.adding_user)
async def save_user(message: types.Message, state: FSMContext):
    users[message.text] = message.text
   
    await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.text} –¥–æ–¥–∞–Ω–∏–π!", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "üßñ‚Äç‚ôÇÔ∏è –í–∏–±—Ä–∞—Ç–∏ —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ")
async def select_bath_visitors(message: types.Message, state: FSMContext):
    global expenses, bath_cost, alcohol_drinkers
    
    # –û—á–∏—â–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    expenses = {}
    bath_cost = 0
    alcohol_drinkers = []
    
    if not users:
        await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"visitor_{name}")] for name in users] +
                        [[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finalize_visitors")]]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ (–≤—Å—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω—ñ):", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_visitors)

@dp.callback_query(F.data.startswith("visitor_"), BathSession.selecting_visitors)
async def toggle_bath_visitor(callback: types.CallbackQuery):
    user = callback.data.replace("visitor_", "")
    if user in bath_visitors:
        bath_visitors.remove(user)
    else:
        bath_visitors.append(user)
    await callback.answer(f"‚úÖ {user} {'–¥–æ–¥–∞–Ω–∏–π' if user in bath_visitors else '–≤–∏–¥–∞–ª–µ–Ω–∏–π'} –∑—ñ —Å–ø–∏—Å–∫—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤ –±–∞–Ω—ñ.")

@dp.callback_query(F.data == "finalize_visitors", BathSession.selecting_visitors)
async def finalize_bath_visitors(callback: types.CallbackQuery, state: FSMContext):
    if not bath_visitors:
        await callback.message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á–∞!")
        return
    
    await callback.message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤ –±–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –æ–±–Ω—É–ª–µ–Ω—ñ.", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏")
async def add_expense_menu(message: types.Message, state: FSMContext):
    if not bath_visitors:
        await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ!")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"expense_{name}")] for name in bath_visitors]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –∑—Ä–æ–±–∏–≤ –≤–∏—Ç—Ä–∞—Ç–∏:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_expense_user)

@dp.callback_query(F.data.startswith("expense_"), BathSession.selecting_expense_user)
async def select_expense_type(callback: types.CallbackQuery, state: FSMContext):
    user = callback.data.replace("expense_", "")
    await state.update_data(expense_user=user)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üçó –á–∂–∞", callback_data="expense_food")],
            [InlineKeyboardButton(text="üçæ –ê–ª–∫–æ–≥–æ–ª—å", callback_data="expense_alcohol")]
        ]
    )
    await callback.message.answer(f"–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏—Ç—Ä–∞—Ç –¥–ª—è {user}:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_expense_type)

@dp.callback_query(F.data.startswith("expense_"), BathSession.selecting_expense_type)
async def enter_expense_amount(callback: types.CallbackQuery, state: FSMContext):
    expense_type = callback.data.replace("expense_", "")
    await state.update_data(expense_type=expense_type)
    
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    await state.set_state(BathSession.entering_expense_amount)

@dp.message(BathSession.entering_expense_amount, F.text.regexp(r'\d+'))
async def save_expense(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = data.get("expense_user")
    expense_type = data.get("expense_type")
    amount = int(message.text)
    
    if user not in expenses:
        expenses[user] = {"food": 0, "alcohol": 0}
    
    expenses[user][expense_type] += amount
    
    await message.answer(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è {user} –∑–∞–ø–∏—Å–∞–Ω—ñ: {amount} –≥—Ä–Ω –Ω–∞ {('üçó –á–∂–∞' if expense_type == 'food' else 'üçæ –ê–ª–∫–æ–≥–æ–ª—å')}", reply_markup=main_menu)
    await state.clear()




@dp.message(F.text == "üî• –í–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ")
async def set_bath_cost(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    await state.set_state(BathSession.entering_bath_cost)

@dp.message(BathSession.entering_bath_cost, F.text.regexp(r'\d+'))
async def save_bath_cost(message: types.Message, state: FSMContext):
    global bath_cost
    bath_cost = int(message.text)
    await message.answer(f"‚úÖ –í–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {bath_cost} –≥—Ä–Ω", reply_markup=main_menu)
    await state.clear()




@dp.message(F.text == "üçæ –í–∫–∞–∑–∞—Ç–∏ —Ö—Ç–æ –ø–∏–≤ –∞–ª–∫–æ–≥–æ–ª—å")
async def select_alcohol_drinkers(message: types.Message, state: FSMContext):
    if not bath_visitors:
        await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ!")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"alcohol_{name}")] for name in bath_visitors] +
                        [[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finalize_alcohol")]]
    )
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —Ö—Ç–æ –≤–∂–∏–≤–∞–≤ –∞–ª–∫–æ–≥–æ–ª—å:", reply_markup=keyboard)
    await state.set_state(BathSession.selecting_alcohol_drinkers)

@dp.callback_query(F.data.startswith("alcohol_"), BathSession.selecting_alcohol_drinkers)
async def toggle_alcohol_drinker(callback: types.CallbackQuery):
    user = callback.data.replace("alcohol_", "")
    if user in alcohol_drinkers:
        alcohol_drinkers.remove(user)
    else:
        alcohol_drinkers.append(user)
    await callback.answer(f"‚úÖ {user} {'–¥–æ–¥–∞–Ω–∏–π' if user in alcohol_drinkers else '–≤–∏–¥–∞–ª–µ–Ω–∏–π'} –∑—ñ —Å–ø–∏—Å–∫—É —Ç–∏—Ö, —Ö—Ç–æ –ø–∏–≤ –∞–ª–∫–æ–≥–æ–ª—å.")

@dp.callback_query(F.data == "finalize_alcohol", BathSession.selecting_alcohol_drinkers)
async def finalize_alcohol_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–∏—Ö, —Ö—Ç–æ –ø–∏–≤ –∞–ª–∫–æ–≥–æ–ª—å, –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=main_menu)
    await state.clear()
    

@dp.message(F.text == "üöø –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")
async def finalize_calculation(message: types.Message):
    if not bath_visitors:
        await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏, —Ö—Ç–æ –±—É–≤ —É –±–∞–Ω—ñ!")
        return
    if bath_cost == 0:
        await message.answer("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –±–∞–Ω—ñ –ø–µ—Ä–µ–¥ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º!")
        return
    
    total_food = sum(expenses[user].get("food", 0) for user in bath_visitors if user in expenses)
    total_alcohol = sum(expenses[user].get("alcohol", 0) for user in alcohol_drinkers if user in expenses)
    per_person_bath = bath_cost / len(bath_visitors) if bath_visitors else 0
    per_person_food = total_food / len(bath_visitors) if bath_visitors else 0
    per_person_alcohol = total_alcohol / len(alcohol_drinkers) if alcohol_drinkers else 0
    total_spent = total_food + total_alcohol + bath_cost
    
    result = "üí∞ **–ü—ñ–¥—Å—É–º–æ–∫ –≤–∏—Ç—Ä–∞—Ç:**\n"
    result += f"üîπ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_spent} –≥—Ä–Ω\n"
    result += f"üçó –á–∂–∞: {total_food} –≥—Ä–Ω\n"
    result += f"üçæ –ê–ª–∫–æ–≥–æ–ª—å: {total_alcohol} –≥—Ä–Ω\n"
    result += f"üî• –ë–∞–Ω—è: {bath_cost} –≥—Ä–Ω\n\n"
    
    for user in bath_visitors:
        paid = sum(expenses.get(user, {}).values())  # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äì —Å—É–º–∞ 0
        owes = per_person_bath + per_person_food - paid
        if user in alcohol_drinkers:
            owes += per_person_alcohol
        food_spent = expenses.get(user, {}).get("food", 0)
        alcohol_spent = expenses.get(user, {}).get("alcohol", 0)
        result += (f"üë§ {user}: –í–∏—Ç—Ä–∞—Ç–∏–≤ {paid} –≥—Ä–Ω (üçó {food_spent} –≥—Ä–Ω, üçæ {alcohol_spent} –≥—Ä–Ω). "
                   f"–ú–∞—î —Å–ø–ª–∞—Ç–∏—Ç–∏: {owes:+.2f} –≥—Ä–Ω\n")
    
    await message.answer(result, reply_markup=main_menu)

async def main():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("‚ùå –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
